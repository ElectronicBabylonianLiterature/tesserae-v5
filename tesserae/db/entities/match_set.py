"""Database standardization for token features.

Classes
-------
FeatureSet
    Token features data model.
"""
import typing

from bson.objectid import ObjectId

from tesserae.db.entities import Entity


class MatchSet(Entity):
    """Collection of matches along with the parameters of the match.

    Matching in Tesserae is parameterized in a number of dimensions, and the
    definition of these parameters should be fluid. The MatchSet organizes sets
    of Match entities by their match parameters, allowing for one point from
    which to collect matches when querying the database.

    Parameters
    ----------
    id : bson.objectid.ObjectId, optional
        Database id of the text. Should not be set locally.
    matches : list of bson.objectid.ObjectId, optional
        The database ids of the the matches in the set. These ids should be
        generated by the MongoDB instance itself on insert.
    parameters : dict, optional
        The parameters of the match. The exact contents are fluid to allow for
        extensions to Tesserae, but this should contain all of the information
        necessary to recreate the matches.

    Attributes
    ----------
    id : bson.objectid.ObjectId
        Database id of the text. Should not be set locally.
    matches : list of bson.objectid.ObjectId
        The database ids of the the matches in the set. These ids should be
        generated by the MongoDB instance itself on insert.
    parameters : dict
        The parameters of the match. The exact contents are fluid to allow for
        extensions to Tesserae, but this should contain all of the information
        necessary to recreate the matches.
    """

    collection = 'match_sets'

    def __init__(self, id=None):
        super(MatchSet, self).__init__(id=id, matches=None, parameters=None)
        self.matches: typing.List[ObjectId] = \
            matches if matches is not None else []
        self.parameters: typing.Dict = \
            parameters if parameters is not None else {}
